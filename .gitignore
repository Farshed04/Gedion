import speech_recognition as sr
import pyttsx3
import datetime
import wikipedia
import webbrowser
import os
import json

class GideonCore:
    def __init__(self):
        # Инициализация голосового движка
        self.engine = pyttsx3.init()
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        
        # База знаний и настроек
        self.settings = self.load_settings()
        self.knowledge_base = self.load_knowledge()
        
        # Основные команды
        self.commands = {
            'time': self.get_time,
            'search': self.web_search,
            'open': self.open_app,
            'learn': self.learn_command,
            'shutdown': self.shutdown
        }

    def speak(self, text):
        """Синтез речи"""
        self.engine.say(text)
        self.engine.runAndWait()

    def listen(self):
        """Распознавание речи"""
        with self.microphone as source:
            print("Слушаю...")
            audio = self.recognizer.listen(source)
            
        try:
            query = self.recognizer.recognize_google(audio, language='ru-RU')
            print(f"Распознано: {query}")
            return query.lower()
        except Exception as e:
            print("Не удалось распознать речь")
            return ""

    def load_settings(self):
        """Загрузка настроек"""
        try:
            with open('settings.json') as f:
                return json.load(f)
        except:
            return {'voice': 'ru', 'volume': 0.9}

    def load_knowledge(self):
        """Загрузка базы знаний"""
        try:
            with open('knowledge.json') as f:
                return json.load(f)
        except:
            return {'commands': {}}

    def save_knowledge(self):
        """Сохранение новых знаний"""
        with open('knowledge.json', 'w') as f:
            json.dump(self.knowledge_base, f)

    def get_time(self):
        """Текущее время"""
        now = datetime.datetime.now().strftime("%H:%M")
        self.speak(f"Сейчас {now}")

    def web_search(self, query):
        """Поиск в интернете"""
        wikipedia.set_lang("ru")
        try:
            results = wikipedia.summary(query, sentences=2)
            self.speak("Вот что я нашла:")
            print(results)
            self.speak(results)
        except:
            webbrowser.open(f"https://google.com/search?q={query}")

    def open_app(self, app_name):
        """Открытие приложений"""
        apps = {
            'браузер': 'chrome',
            'музыка': 'spotify',
            'текст': 'notepad.exe'
        }
        os.system(f"start {apps.get(app_name, 'explorer.exe')}")

    def learn_command(self, phrase):
        """Самообучение: добавление новых команд"""
        self.speak("Какой код выполнить для этой команды?")
        code = self.listen()
        self.knowledge_base['commands'][phrase] = code
        self.save_knowledge()
        self.speak("Команда сохранена")

    def shutdown(self):
        """Завершение работы"""
        self.speak("Выключаюсь")
        exit()

    def process_command(self, command):
        """Обработка команд"""
        for key in self.commands:
            if command.startswith(key):
                arg = command[len(key):].strip()
                return self.commands[key](arg)
        
        # Проверка пользовательских команд
        for custom_cmd in self.knowledge_base['commands']:
            if custom_cmd in command:
                os.system(self.knowledge_base['commands'][custom_cmd])
                return True
        
        return False

    def run(self):
        """Основной цикл"""
        self.speak("Гедеон активирован")
        while True:
            command = self.listen()
            if not self.process_command(command):
                self.speak("Не поняла команду. Повторите, пожалуйста")

if __name__ == "__main__":
    gideon = GideonCore()
    gideon.run()
